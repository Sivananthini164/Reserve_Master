{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { globalCss } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\"; // to determine if the global styles are static or dynamic\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst isDynamicSupport = typeof globalCss({}) === 'function';\nexport const html = (theme, enableColorScheme) => ({\n  WebkitFontSmoothing: 'antialiased',\n  // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale',\n  // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box',\n  // Fix font resize problem in iOS\n  WebkitTextSizeAdjust: '100%',\n  // When used under CssVarsProvider, colorScheme should not be applied dynamically because it will generate the stylesheet twice for server-rendered applications.\n  ...(enableColorScheme && !theme.vars && {\n    colorScheme: theme.palette.mode\n  })\n});\nexport const body = theme => ({\n  color: (theme.vars || theme).palette.text.primary,\n  ...theme.typography.body1,\n  backgroundColor: (theme.vars || theme).palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: (theme.vars || theme).palette.common.white\n  }\n});\nexport const styles = function (theme) {\n  let enableColorScheme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const colorSchemeStyles = {};\n\n  if (enableColorScheme && theme.colorSchemes && typeof theme.getColorSchemeSelector === 'function') {\n    Object.entries(theme.colorSchemes).forEach(_ref => {\n      let [key, scheme] = _ref;\n      const selector = theme.getColorSchemeSelector(key);\n\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        colorSchemeStyles[selector] = {\n          ':root': {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        colorSchemeStyles[selector.replace(/\\s*&/, '')] = {\n          colorScheme: scheme.palette?.mode\n        };\n      }\n    });\n  }\n\n  let defaultStyles = {\n    html: html(theme, enableColorScheme),\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: {\n      margin: 0,\n      // Remove the margin in all browsers.\n      ...body(theme),\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: (theme.vars || theme).palette.background.default\n      }\n    },\n    ...colorSchemeStyles\n  };\n  const themeOverrides = theme.components?.MuiCssBaseline?.styleOverrides;\n\n  if (themeOverrides) {\n    defaultStyles = [defaultStyles, themeOverrides];\n  }\n\n  return defaultStyles;\n}; // `ecs` stands for enableColorScheme. This is internal logic to make it work with Pigment CSS, so shorter is better.\n\nconst SELECTOR = 'mui-ecs';\n\nconst staticStyles = theme => {\n  const result = styles(theme, false);\n  const baseStyles = Array.isArray(result) ? result[0] : result;\n\n  if (!theme.vars && baseStyles) {\n    baseStyles.html[`:root:has(${SELECTOR})`] = {\n      colorScheme: theme.palette.mode\n    };\n  }\n\n  if (theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const selector = theme.getColorSchemeSelector(key);\n\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        baseStyles[selector] = {\n          [`:root:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        baseStyles[selector.replace(/\\s*&/, '')] = {\n          [`&:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      }\n    });\n  }\n\n  return result;\n};\n\nconst GlobalStyles = globalCss(isDynamicSupport ? _ref3 => {\n  let {\n    theme,\n    enableColorScheme\n  } = _ref3;\n  return styles(theme, enableColorScheme);\n} : _ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return staticStyles(theme);\n});\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\n\nfunction CssBaseline(inProps) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCssBaseline'\n  });\n  const {\n    children,\n    enableColorScheme = false\n  } = props;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [isDynamicSupport && /*#__PURE__*/_jsx(GlobalStyles, {\n      enableColorScheme: enableColorScheme\n    }), !isDynamicSupport && !enableColorScheme && /*#__PURE__*/_jsx(\"span\", {\n      className: SELECTOR,\n      style: {\n        display: 'none'\n      }\n    }), children]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme: PropTypes.bool\n} : void 0;\nexport default CssBaseline;","map":{"version":3,"names":["React","PropTypes","globalCss","useDefaultProps","jsx","_jsx","jsxs","_jsxs","isDynamicSupport","html","theme","enableColorScheme","WebkitFontSmoothing","MozOsxFontSmoothing","boxSizing","WebkitTextSizeAdjust","vars","colorScheme","palette","mode","body","color","text","primary","typography","body1","backgroundColor","background","default","common","white","styles","colorSchemeStyles","colorSchemes","getColorSchemeSelector","Object","entries","forEach","key","scheme","selector","startsWith","replace","defaultStyles","fontWeight","fontWeightBold","margin","themeOverrides","components","MuiCssBaseline","styleOverrides","SELECTOR","staticStyles","result","baseStyles","Array","isArray","GlobalStyles","CssBaseline","inProps","props","name","children","Fragment","className","style","display","process","env","NODE_ENV","propTypes","node","bool"],"sources":["C:/Users/DELL/Documents/Reserve-Master/node_modules/@mui/material/CssBaseline/CssBaseline.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { globalCss } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\n\n// to determine if the global styles are static or dynamic\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst isDynamicSupport = typeof globalCss({}) === 'function';\nexport const html = (theme, enableColorScheme) => ({\n  WebkitFontSmoothing: 'antialiased',\n  // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale',\n  // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box',\n  // Fix font resize problem in iOS\n  WebkitTextSizeAdjust: '100%',\n  // When used under CssVarsProvider, colorScheme should not be applied dynamically because it will generate the stylesheet twice for server-rendered applications.\n  ...(enableColorScheme && !theme.vars && {\n    colorScheme: theme.palette.mode\n  })\n});\nexport const body = theme => ({\n  color: (theme.vars || theme).palette.text.primary,\n  ...theme.typography.body1,\n  backgroundColor: (theme.vars || theme).palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: (theme.vars || theme).palette.common.white\n  }\n});\nexport const styles = (theme, enableColorScheme = false) => {\n  const colorSchemeStyles = {};\n  if (enableColorScheme && theme.colorSchemes && typeof theme.getColorSchemeSelector === 'function') {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      const selector = theme.getColorSchemeSelector(key);\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        colorSchemeStyles[selector] = {\n          ':root': {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        colorSchemeStyles[selector.replace(/\\s*&/, '')] = {\n          colorScheme: scheme.palette?.mode\n        };\n      }\n    });\n  }\n  let defaultStyles = {\n    html: html(theme, enableColorScheme),\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: {\n      margin: 0,\n      // Remove the margin in all browsers.\n      ...body(theme),\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: (theme.vars || theme).palette.background.default\n      }\n    },\n    ...colorSchemeStyles\n  };\n  const themeOverrides = theme.components?.MuiCssBaseline?.styleOverrides;\n  if (themeOverrides) {\n    defaultStyles = [defaultStyles, themeOverrides];\n  }\n  return defaultStyles;\n};\n\n// `ecs` stands for enableColorScheme. This is internal logic to make it work with Pigment CSS, so shorter is better.\nconst SELECTOR = 'mui-ecs';\nconst staticStyles = theme => {\n  const result = styles(theme, false);\n  const baseStyles = Array.isArray(result) ? result[0] : result;\n  if (!theme.vars && baseStyles) {\n    baseStyles.html[`:root:has(${SELECTOR})`] = {\n      colorScheme: theme.palette.mode\n    };\n  }\n  if (theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      const selector = theme.getColorSchemeSelector(key);\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        baseStyles[selector] = {\n          [`:root:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        baseStyles[selector.replace(/\\s*&/, '')] = {\n          [`&:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      }\n    });\n  }\n  return result;\n};\nconst GlobalStyles = globalCss(isDynamicSupport ? ({\n  theme,\n  enableColorScheme\n}) => styles(theme, enableColorScheme) : ({\n  theme\n}) => staticStyles(theme));\n\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\nfunction CssBaseline(inProps) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCssBaseline'\n  });\n  const {\n    children,\n    enableColorScheme = false\n  } = props;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [isDynamicSupport && /*#__PURE__*/_jsx(GlobalStyles, {\n      enableColorScheme: enableColorScheme\n    }), !isDynamicSupport && !enableColorScheme && /*#__PURE__*/_jsx(\"span\", {\n      className: SELECTOR,\n      style: {\n        display: 'none'\n      }\n    }), children]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme: PropTypes.bool\n} : void 0;\nexport default CssBaseline;"],"mappings":"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"},"metadata":{},"sourceType":"module"}