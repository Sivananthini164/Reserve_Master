{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nlet globalId = 0; // TODO React 17: Remove `useGlobalId` once React 17 support is removed\n\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n} // See https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379 for why\n\n\nconst safeReact = { ...React\n};\nconst maybeReactUseId = safeReact.useId;\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\n\nexport default function useId(idOverride) {\n  // React.useId() is only available from React 17.0.0.\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride ?? reactId;\n  } // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n\n\n  return useGlobalId(idOverride);\n}","map":{"version":3,"names":["React","globalId","useGlobalId","idOverride","defaultId","setDefaultId","useState","id","useEffect","safeReact","maybeReactUseId","useId","undefined","reactId"],"sources":["C:/Users/DELL/Documents/Reserve-Master/node_modules/@mui/utils/esm/useId/useId.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nlet globalId = 0;\n\n// TODO React 17: Remove `useGlobalId` once React 17 support is removed\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n}\n\n// See https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379 for why\nconst safeReact = {\n  ...React\n};\nconst maybeReactUseId = safeReact.useId;\n\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport default function useId(idOverride) {\n  // React.useId() is only available from React 17.0.0.\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride ?? reactId;\n  }\n\n  // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n  return useGlobalId(idOverride);\n}"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,IAAIC,QAAQ,GAAG,CAAf,C,CAEA;;AACA,SAASC,WAAT,CAAqBC,UAArB,EAAiC;EAC/B,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,KAAK,CAACM,QAAN,CAAeH,UAAf,CAAlC;EACA,MAAMI,EAAE,GAAGJ,UAAU,IAAIC,SAAzB;EACAJ,KAAK,CAACQ,SAAN,CAAgB,MAAM;IACpB,IAAIJ,SAAS,IAAI,IAAjB,EAAuB;MACrB;MACA;MACA;MACA;MACAH,QAAQ,IAAI,CAAZ;MACAI,YAAY,CAAE,OAAMJ,QAAS,EAAjB,CAAZ;IACD;EACF,CATD,EASG,CAACG,SAAD,CATH;EAUA,OAAOG,EAAP;AACD,C,CAED;;;AACA,MAAME,SAAS,GAAG,EAChB,GAAGT;AADa,CAAlB;AAGA,MAAMU,eAAe,GAAGD,SAAS,CAACE,KAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASA,KAAT,CAAeR,UAAf,EAA2B;EACxC;EACA,IAAIO,eAAe,KAAKE,SAAxB,EAAmC;IACjC,MAAMC,OAAO,GAAGH,eAAe,EAA/B;IACA,OAAOP,UAAU,IAAIU,OAArB;EACD,CALuC,CAOxC;EACA;;;EACA,OAAOX,WAAW,CAACC,UAAD,CAAlB;AACD"},"metadata":{},"sourceType":"module"}