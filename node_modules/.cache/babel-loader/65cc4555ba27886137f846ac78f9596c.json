{"ast":null,"code":"/**\n * @mui/styled-engine v6.1.5\n *\n * @license MIT\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable no-underscore-dangle */\nimport emStyled from '@emotion/styled';\nimport { serializeStyles as emSerializeStyles } from '@emotion/serialize';\nexport default function styled(tag, options) {\n  const stylesFactory = emStyled(tag, options);\n\n  if (process.env.NODE_ENV !== 'production') {\n    return function () {\n      const component = typeof tag === 'string' ? `\"${tag}\"` : 'component';\n\n      for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {\n        styles[_key] = arguments[_key];\n      }\n\n      if (styles.length === 0) {\n        console.error([`MUI: Seems like you called \\`styled(${component})()\\` without a \\`style\\` argument.`, 'You must provide a `styles` argument: `styled(\"div\")(styleYouForgotToPass)`.'].join('\\n'));\n      } else if (styles.some(style => style === undefined)) {\n        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);\n      }\n\n      return stylesFactory(...styles);\n    };\n  }\n\n  return stylesFactory;\n} // eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport function internal_mutateStyles(tag, processor) {\n  // Emotion attaches all the styles as `__emotion_styles`.\n  // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186\n  if (Array.isArray(tag.__emotion_styles)) {\n    tag.__emotion_styles = processor(tag.__emotion_styles);\n  }\n} // Emotion only accepts an array, but we want to avoid allocations\n\nconst wrapper = []; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport function internal_serializeStyles(styles) {\n  wrapper[0] = styles;\n  return emSerializeStyles(wrapper);\n}\nexport { ThemeContext, keyframes, css } from '@emotion/react';\nexport { default as StyledEngineProvider } from \"./StyledEngineProvider/index.js\";\nexport { default as GlobalStyles } from \"./GlobalStyles/index.js\";","map":{"version":3,"names":["emStyled","serializeStyles","emSerializeStyles","styled","tag","options","stylesFactory","process","env","NODE_ENV","component","styles","length","console","error","join","some","style","undefined","internal_mutateStyles","processor","Array","isArray","__emotion_styles","wrapper","internal_serializeStyles","ThemeContext","keyframes","css","default","StyledEngineProvider","GlobalStyles"],"sources":["C:/Users/DELL/Documents/Reserve-Master/node_modules/@mui/styled-engine/index.js"],"sourcesContent":["/**\n * @mui/styled-engine v6.1.5\n *\n * @license MIT\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/* eslint-disable no-underscore-dangle */\nimport emStyled from '@emotion/styled';\nimport { serializeStyles as emSerializeStyles } from '@emotion/serialize';\nexport default function styled(tag, options) {\n  const stylesFactory = emStyled(tag, options);\n  if (process.env.NODE_ENV !== 'production') {\n    return (...styles) => {\n      const component = typeof tag === 'string' ? `\"${tag}\"` : 'component';\n      if (styles.length === 0) {\n        console.error([`MUI: Seems like you called \\`styled(${component})()\\` without a \\`style\\` argument.`, 'You must provide a `styles` argument: `styled(\"div\")(styleYouForgotToPass)`.'].join('\\n'));\n      } else if (styles.some(style => style === undefined)) {\n        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);\n      }\n      return stylesFactory(...styles);\n    };\n  }\n  return stylesFactory;\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function internal_mutateStyles(tag, processor) {\n  // Emotion attaches all the styles as `__emotion_styles`.\n  // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186\n  if (Array.isArray(tag.__emotion_styles)) {\n    tag.__emotion_styles = processor(tag.__emotion_styles);\n  }\n}\n\n// Emotion only accepts an array, but we want to avoid allocations\nconst wrapper = [];\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function internal_serializeStyles(styles) {\n  wrapper[0] = styles;\n  return emSerializeStyles(wrapper);\n}\nexport { ThemeContext, keyframes, css } from '@emotion/react';\nexport { default as StyledEngineProvider } from \"./StyledEngineProvider/index.js\";\nexport { default as GlobalStyles } from \"./GlobalStyles/index.js\";"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,OAAOA,QAAP,MAAqB,iBAArB;AACA,SAASC,eAAe,IAAIC,iBAA5B,QAAqD,oBAArD;AACA,eAAe,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,OAArB,EAA8B;EAC3C,MAAMC,aAAa,GAAGN,QAAQ,CAACI,GAAD,EAAMC,OAAN,CAA9B;;EACA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,OAAO,YAAe;MACpB,MAAMC,SAAS,GAAG,OAAON,GAAP,KAAe,QAAf,GAA2B,IAAGA,GAAI,GAAlC,GAAuC,WAAzD;;MADoB,kCAAXO,MAAW;QAAXA,MAAW;MAAA;;MAEpB,IAAIA,MAAM,CAACC,MAAP,KAAkB,CAAtB,EAAyB;QACvBC,OAAO,CAACC,KAAR,CAAc,CAAE,uCAAsCJ,SAAU,qCAAlD,EAAwF,8EAAxF,EAAwKK,IAAxK,CAA6K,IAA7K,CAAd;MACD,CAFD,MAEO,IAAIJ,MAAM,CAACK,IAAP,CAAYC,KAAK,IAAIA,KAAK,KAAKC,SAA/B,CAAJ,EAA+C;QACpDL,OAAO,CAACC,KAAR,CAAe,mBAAkBJ,SAAU,qDAA3C;MACD;;MACD,OAAOJ,aAAa,CAAC,GAAGK,MAAJ,CAApB;IACD,CARD;EASD;;EACD,OAAOL,aAAP;AACD,C,CAED;;AACA,OAAO,SAASa,qBAAT,CAA+Bf,GAA/B,EAAoCgB,SAApC,EAA+C;EACpD;EACA;EACA,IAAIC,KAAK,CAACC,OAAN,CAAclB,GAAG,CAACmB,gBAAlB,CAAJ,EAAyC;IACvCnB,GAAG,CAACmB,gBAAJ,GAAuBH,SAAS,CAAChB,GAAG,CAACmB,gBAAL,CAAhC;EACD;AACF,C,CAED;;AACA,MAAMC,OAAO,GAAG,EAAhB,C,CACA;;AACA,OAAO,SAASC,wBAAT,CAAkCd,MAAlC,EAA0C;EAC/Ca,OAAO,CAAC,CAAD,CAAP,GAAab,MAAb;EACA,OAAOT,iBAAiB,CAACsB,OAAD,CAAxB;AACD;AACD,SAASE,YAAT,EAAuBC,SAAvB,EAAkCC,GAAlC,QAA6C,gBAA7C;AACA,SAASC,OAAO,IAAIC,oBAApB,QAAgD,iCAAhD;AACA,SAASD,OAAO,IAAIE,YAApB,QAAwC,yBAAxC"},"metadata":{},"sourceType":"module"}