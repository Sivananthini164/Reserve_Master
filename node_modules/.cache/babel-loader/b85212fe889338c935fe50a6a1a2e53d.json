{"ast":null,"code":"'use client';\n\nimport useForkRef from \"../useForkRef/index.js\";\nimport appendOwnerState from \"../appendOwnerState/index.js\";\nimport mergeSlotProps from \"../mergeSlotProps/index.js\";\nimport resolveComponentProps from \"../resolveComponentProps/index.js\";\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\n\nfunction useSlotProps(parameters) {\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState,\n    skipResolvingSlotProps = false,\n    ...other\n  } = parameters;\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps({ ...other,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.additionalProps?.ref);\n  const props = appendOwnerState(elementType, { ...mergedProps,\n    ref\n  }, ownerState);\n  return props;\n}\n\nexport default useSlotProps;","map":{"version":3,"names":["useForkRef","appendOwnerState","mergeSlotProps","resolveComponentProps","useSlotProps","parameters","elementType","externalSlotProps","ownerState","skipResolvingSlotProps","other","resolvedComponentsProps","props","mergedProps","internalRef","ref","additionalProps"],"sources":["C:/Users/DELL/Documents/Reserve-Master/node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js"],"sourcesContent":["'use client';\n\nimport useForkRef from \"../useForkRef/index.js\";\nimport appendOwnerState from \"../appendOwnerState/index.js\";\nimport mergeSlotProps from \"../mergeSlotProps/index.js\";\nimport resolveComponentProps from \"../resolveComponentProps/index.js\";\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nfunction useSlotProps(parameters) {\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState,\n    skipResolvingSlotProps = false,\n    ...other\n  } = parameters;\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps({\n    ...other,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.additionalProps?.ref);\n  const props = appendOwnerState(elementType, {\n    ...mergedProps,\n    ref\n  }, ownerState);\n  return props;\n}\nexport default useSlotProps;"],"mappings":"AAAA;;AAEA,OAAOA,UAAP,MAAuB,wBAAvB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,qBAAP,MAAkC,mCAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;EAChC,MAAM;IACJC,WADI;IAEJC,iBAFI;IAGJC,UAHI;IAIJC,sBAAsB,GAAG,KAJrB;IAKJ,GAAGC;EALC,IAMFL,UANJ;EAOA,MAAMM,uBAAuB,GAAGF,sBAAsB,GAAG,EAAH,GAAQN,qBAAqB,CAACI,iBAAD,EAAoBC,UAApB,CAAnF;EACA,MAAM;IACJI,KAAK,EAAEC,WADH;IAEJC;EAFI,IAGFZ,cAAc,CAAC,EACjB,GAAGQ,KADc;IAEjBH,iBAAiB,EAAEI;EAFF,CAAD,CAHlB;EAOA,MAAMI,GAAG,GAAGf,UAAU,CAACc,WAAD,EAAcH,uBAAuB,EAAEI,GAAvC,EAA4CV,UAAU,CAACW,eAAX,EAA4BD,GAAxE,CAAtB;EACA,MAAMH,KAAK,GAAGX,gBAAgB,CAACK,WAAD,EAAc,EAC1C,GAAGO,WADuC;IAE1CE;EAF0C,CAAd,EAG3BP,UAH2B,CAA9B;EAIA,OAAOI,KAAP;AACD;;AACD,eAAeR,YAAf"},"metadata":{},"sourceType":"module"}