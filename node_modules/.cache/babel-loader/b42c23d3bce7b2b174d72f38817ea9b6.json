{"ast":null,"code":"import deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from \"./cssVarsParser.js\";\n\nfunction prepareCssVars(theme) {\n  let parserConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    getSelector = defaultGetSelector,\n    disableCssColorScheme,\n    colorSchemeSelector: selector\n  } = parserConfig; // @ts-ignore - ignore components do not exist\n\n  const {\n    colorSchemes = {},\n    components,\n    defaultColorScheme = 'light',\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    [defaultColorScheme]: defaultScheme,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(_ref => {\n    let [key, scheme] = _ref;\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n\n  if (defaultScheme) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(defaultScheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n\n  function defaultGetSelector(colorScheme, cssObject) {\n    let rule = selector;\n\n    if (selector === 'class') {\n      rule = '.%s';\n    }\n\n    if (selector === 'data') {\n      rule = '[data-%s]';\n    }\n\n    if (selector?.startsWith('data-') && !selector.includes('%s')) {\n      // 'data-joy-color-scheme' -> '[data-joy-color-scheme=\"%s\"]'\n      rule = `[${selector}=\"%s\"]`;\n    }\n\n    if (colorScheme) {\n      if (rule === 'media') {\n        if (theme.defaultColorScheme === colorScheme) {\n          return ':root';\n        }\n\n        const mode = colorSchemes[colorScheme]?.palette?.mode || colorScheme;\n        return {\n          [`@media (prefers-color-scheme: ${mode})`]: {\n            ':root': cssObject\n          }\n        };\n      }\n\n      if (rule) {\n        if (theme.defaultColorScheme === colorScheme) {\n          return `:root, ${rule.replace('%s', String(colorScheme))}`;\n        }\n\n        return rule.replace('%s', String(colorScheme));\n      }\n    }\n\n    return ':root';\n  }\n\n  const generateThemeVars = () => {\n    let vars = { ...rootVars\n    };\n    Object.entries(colorSchemesMap).forEach(_ref2 => {\n      let [, {\n        vars: schemeVars\n      }] = _ref2;\n      vars = deepmerge(vars, schemeVars);\n    });\n    return vars;\n  };\n\n  const generateStyleSheets = () => {\n    const stylesheets = [];\n    const colorScheme = theme.defaultColorScheme || 'light';\n\n    function insertStyleSheet(key, css) {\n      if (Object.keys(css).length) {\n        stylesheets.push(typeof key === 'string' ? {\n          [key]: { ...css\n          }\n        } : key);\n      }\n    }\n\n    insertStyleSheet(getSelector(undefined, { ...rootCss\n    }), rootCss);\n    const {\n      [colorScheme]: defaultSchemeVal,\n      ...other\n    } = colorSchemesMap;\n\n    if (defaultSchemeVal) {\n      // default color scheme has to come before other color schemes\n      const {\n        css\n      } = defaultSchemeVal;\n      const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : { ...css\n      };\n      insertStyleSheet(getSelector(colorScheme, { ...finalCss\n      }), finalCss);\n    }\n\n    Object.entries(other).forEach(_ref3 => {\n      let [key, {\n        css\n      }] = _ref3;\n      const cssColorSheme = colorSchemes[key]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : { ...css\n      };\n      insertStyleSheet(getSelector(key, { ...finalCss\n      }), finalCss);\n    });\n    return stylesheets;\n  };\n\n  return {\n    vars: themeVars,\n    generateThemeVars,\n    generateStyleSheets\n  };\n}\n\nexport default prepareCssVars;","map":{"version":3,"names":["deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","getSelector","defaultGetSelector","disableCssColorScheme","colorSchemeSelector","selector","colorSchemes","components","defaultColorScheme","otherTheme","vars","rootVars","css","rootCss","varsWithDefaults","rootVarsWithDefaults","themeVars","colorSchemesMap","defaultScheme","otherColorSchemes","Object","entries","forEach","key","scheme","colorScheme","cssObject","rule","startsWith","includes","mode","palette","replace","String","generateThemeVars","schemeVars","generateStyleSheets","stylesheets","insertStyleSheet","keys","length","push","undefined","defaultSchemeVal","other","cssColorSheme","finalCss"],"sources":["C:/Users/DELL/Documents/Reserve-Master/node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"sourcesContent":["import deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from \"./cssVarsParser.js\";\nfunction prepareCssVars(theme, parserConfig = {}) {\n  const {\n    getSelector = defaultGetSelector,\n    disableCssColorScheme,\n    colorSchemeSelector: selector\n  } = parserConfig;\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    components,\n    defaultColorScheme = 'light',\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    [defaultColorScheme]: defaultScheme,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (defaultScheme) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(defaultScheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  function defaultGetSelector(colorScheme, cssObject) {\n    let rule = selector;\n    if (selector === 'class') {\n      rule = '.%s';\n    }\n    if (selector === 'data') {\n      rule = '[data-%s]';\n    }\n    if (selector?.startsWith('data-') && !selector.includes('%s')) {\n      // 'data-joy-color-scheme' -> '[data-joy-color-scheme=\"%s\"]'\n      rule = `[${selector}=\"%s\"]`;\n    }\n    if (colorScheme) {\n      if (rule === 'media') {\n        if (theme.defaultColorScheme === colorScheme) {\n          return ':root';\n        }\n        const mode = colorSchemes[colorScheme]?.palette?.mode || colorScheme;\n        return {\n          [`@media (prefers-color-scheme: ${mode})`]: {\n            ':root': cssObject\n          }\n        };\n      }\n      if (rule) {\n        if (theme.defaultColorScheme === colorScheme) {\n          return `:root, ${rule.replace('%s', String(colorScheme))}`;\n        }\n        return rule.replace('%s', String(colorScheme));\n      }\n    }\n    return ':root';\n  }\n  const generateThemeVars = () => {\n    let vars = {\n      ...rootVars\n    };\n    Object.entries(colorSchemesMap).forEach(([, {\n      vars: schemeVars\n    }]) => {\n      vars = deepmerge(vars, schemeVars);\n    });\n    return vars;\n  };\n  const generateStyleSheets = () => {\n    const stylesheets = [];\n    const colorScheme = theme.defaultColorScheme || 'light';\n    function insertStyleSheet(key, css) {\n      if (Object.keys(css).length) {\n        stylesheets.push(typeof key === 'string' ? {\n          [key]: {\n            ...css\n          }\n        } : key);\n      }\n    }\n    insertStyleSheet(getSelector(undefined, {\n      ...rootCss\n    }), rootCss);\n    const {\n      [colorScheme]: defaultSchemeVal,\n      ...other\n    } = colorSchemesMap;\n    if (defaultSchemeVal) {\n      // default color scheme has to come before other color schemes\n      const {\n        css\n      } = defaultSchemeVal;\n      const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : {\n        ...css\n      };\n      insertStyleSheet(getSelector(colorScheme, {\n        ...finalCss\n      }), finalCss);\n    }\n    Object.entries(other).forEach(([key, {\n      css\n    }]) => {\n      const cssColorSheme = colorSchemes[key]?.palette?.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? {\n        colorScheme: cssColorSheme,\n        ...css\n      } : {\n        ...css\n      };\n      insertStyleSheet(getSelector(key, {\n        ...finalCss\n      }), finalCss);\n    });\n    return stylesheets;\n  };\n  return {\n    vars: themeVars,\n    generateThemeVars,\n    generateStyleSheets\n  };\n}\nexport default prepareCssVars;"],"mappings":"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"},"metadata":{},"sourceType":"module"}