{"ast":null,"code":"'use client';\n\nimport useForkRef from '@mui/utils/useForkRef';\nimport appendOwnerState from '@mui/utils/appendOwnerState';\nimport resolveComponentProps from '@mui/utils/resolveComponentProps';\nimport mergeSlotProps from '@mui/utils/mergeSlotProps';\n/**\n * An internal function to create a Material UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Material UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\n\nexport default function useSlot(\n/**\n * The slot's name. All Material UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  const {\n    className,\n    elementType: initialElementType,\n    ownerState,\n    externalForwardedProps,\n    getSlotOwnerState,\n    internalForwardedProps,\n    ...useSlotPropsParams\n  } = parameters;\n  const {\n    component: rootComponent,\n    slots = {\n      [name]: undefined\n    },\n    slotProps = {\n      [name]: undefined\n    },\n    ...other\n  } = externalForwardedProps;\n  const elementType = slots[name] || initialElementType; // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const {\n    props: {\n      component: slotComponent,\n      ...mergedProps\n    },\n    internalRef\n  } = mergeSlotProps({\n    className,\n    ...useSlotPropsParams,\n    externalForwardedProps: name === 'root' ? other : undefined,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.ref);\n  const slotOwnerState = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};\n  const finalOwnerState = { ...ownerState,\n    ...slotOwnerState\n  };\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, { ...(name === 'root' && !rootComponent && !slots[name] && internalForwardedProps),\n    ...(name !== 'root' && !slots[name] && internalForwardedProps),\n    ...mergedProps,\n    ...(LeafComponent && {\n      as: LeafComponent\n    }),\n    ref\n  }, finalOwnerState);\n  Object.keys(slotOwnerState).forEach(propName => {\n    delete props[propName];\n  });\n  return [elementType, props];\n}","map":{"version":3,"names":["useForkRef","appendOwnerState","resolveComponentProps","mergeSlotProps","useSlot","name","parameters","className","elementType","initialElementType","ownerState","externalForwardedProps","getSlotOwnerState","internalForwardedProps","useSlotPropsParams","component","rootComponent","slots","undefined","slotProps","other","resolvedComponentsProps","props","slotComponent","mergedProps","internalRef","externalSlotProps","ref","slotOwnerState","finalOwnerState","LeafComponent","as","Object","keys","forEach","propName"],"sources":["C:/Users/DELL/Documents/Reserve-Master/node_modules/@mui/material/utils/useSlot.js"],"sourcesContent":["'use client';\n\nimport useForkRef from '@mui/utils/useForkRef';\nimport appendOwnerState from '@mui/utils/appendOwnerState';\nimport resolveComponentProps from '@mui/utils/resolveComponentProps';\nimport mergeSlotProps from '@mui/utils/mergeSlotProps';\n/**\n * An internal function to create a Material UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Material UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Material UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  const {\n    className,\n    elementType: initialElementType,\n    ownerState,\n    externalForwardedProps,\n    getSlotOwnerState,\n    internalForwardedProps,\n    ...useSlotPropsParams\n  } = parameters;\n  const {\n    component: rootComponent,\n    slots = {\n      [name]: undefined\n    },\n    slotProps = {\n      [name]: undefined\n    },\n    ...other\n  } = externalForwardedProps;\n  const elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const {\n    props: {\n      component: slotComponent,\n      ...mergedProps\n    },\n    internalRef\n  } = mergeSlotProps({\n    className,\n    ...useSlotPropsParams,\n    externalForwardedProps: name === 'root' ? other : undefined,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.ref);\n  const slotOwnerState = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};\n  const finalOwnerState = {\n    ...ownerState,\n    ...slotOwnerState\n  };\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, {\n    ...(name === 'root' && !rootComponent && !slots[name] && internalForwardedProps),\n    ...(name !== 'root' && !slots[name] && internalForwardedProps),\n    ...mergedProps,\n    ...(LeafComponent && {\n      as: LeafComponent\n    }),\n    ref\n  }, finalOwnerState);\n  Object.keys(slotOwnerState).forEach(propName => {\n    delete props[propName];\n  });\n  return [elementType, props];\n}"],"mappings":"AAAA;;AAEA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,OAAT;AACf;AACA;AACA;AACA;AACA;AACA;AACAC,IAPe,EAOTC,UAPS,EAOG;EAChB,MAAM;IACJC,SADI;IAEJC,WAAW,EAAEC,kBAFT;IAGJC,UAHI;IAIJC,sBAJI;IAKJC,iBALI;IAMJC,sBANI;IAOJ,GAAGC;EAPC,IAQFR,UARJ;EASA,MAAM;IACJS,SAAS,EAAEC,aADP;IAEJC,KAAK,GAAG;MACN,CAACZ,IAAD,GAAQa;IADF,CAFJ;IAKJC,SAAS,GAAG;MACV,CAACd,IAAD,GAAQa;IADE,CALR;IAQJ,GAAGE;EARC,IASFT,sBATJ;EAUA,MAAMH,WAAW,GAAGS,KAAK,CAACZ,IAAD,CAAL,IAAeI,kBAAnC,CApBgB,CAsBhB;EACA;;EACA,MAAMY,uBAAuB,GAAGnB,qBAAqB,CAACiB,SAAS,CAACd,IAAD,CAAV,EAAkBK,UAAlB,CAArD;EACA,MAAM;IACJY,KAAK,EAAE;MACLP,SAAS,EAAEQ,aADN;MAEL,GAAGC;IAFE,CADH;IAKJC;EALI,IAMFtB,cAAc,CAAC;IACjBI,SADiB;IAEjB,GAAGO,kBAFc;IAGjBH,sBAAsB,EAAEN,IAAI,KAAK,MAAT,GAAkBe,KAAlB,GAA0BF,SAHjC;IAIjBQ,iBAAiB,EAAEL;EAJF,CAAD,CANlB;EAYA,MAAMM,GAAG,GAAG3B,UAAU,CAACyB,WAAD,EAAcJ,uBAAuB,EAAEM,GAAvC,EAA4CrB,UAAU,CAACqB,GAAvD,CAAtB;EACA,MAAMC,cAAc,GAAGhB,iBAAiB,GAAGA,iBAAiB,CAACY,WAAD,CAApB,GAAoC,EAA5E;EACA,MAAMK,eAAe,GAAG,EACtB,GAAGnB,UADmB;IAEtB,GAAGkB;EAFmB,CAAxB;EAIA,MAAME,aAAa,GAAGzB,IAAI,KAAK,MAAT,GAAkBkB,aAAa,IAAIP,aAAnC,GAAmDO,aAAzE;EACA,MAAMD,KAAK,GAAGrB,gBAAgB,CAACO,WAAD,EAAc,EAC1C,IAAIH,IAAI,KAAK,MAAT,IAAmB,CAACW,aAApB,IAAqC,CAACC,KAAK,CAACZ,IAAD,CAA3C,IAAqDQ,sBAAzD,CAD0C;IAE1C,IAAIR,IAAI,KAAK,MAAT,IAAmB,CAACY,KAAK,CAACZ,IAAD,CAAzB,IAAmCQ,sBAAvC,CAF0C;IAG1C,GAAGW,WAHuC;IAI1C,IAAIM,aAAa,IAAI;MACnBC,EAAE,EAAED;IADe,CAArB,CAJ0C;IAO1CH;EAP0C,CAAd,EAQ3BE,eAR2B,CAA9B;EASAG,MAAM,CAACC,IAAP,CAAYL,cAAZ,EAA4BM,OAA5B,CAAoCC,QAAQ,IAAI;IAC9C,OAAOb,KAAK,CAACa,QAAD,CAAZ;EACD,CAFD;EAGA,OAAO,CAAC3B,WAAD,EAAcc,KAAd,CAAP;AACD"},"metadata":{},"sourceType":"module"}